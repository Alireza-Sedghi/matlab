function [cM] = 	...
			stats_BE(astr_BETable, a_cols, varargin)
%
% NAME
%
%  function [cM] = stats_BE(astr_BETable, a_cols	[,		...	 
%							ab_skipPrune,	...
%							ab_skipFirstCol])
%
% ARGUMENTS
% INPUT
%	astr_BETable	string		output table from 'mris_curvature_stats'
%	a_cols		int		number of "paired" columns in 
%					<astr_BETable> to process. In the default
%					case this will be <6>.
%
% OPTIONAL
%	ab_skipPrune	bool		if true, skip the call to 'tableprune.sh'
%	ab_skipFirstCol	bool		if true, remove the first col from the
%					BE and BP tables -- this attempts to 
%					reduce the effect of possibly large
%					outliers in the first column.
%
% OUTPUTS
%	cM		cell		cell array of stats data containing
%					per-threshold normalized plots
%
% DESCRIPTION
%
%	'stats_BE' is a high-level routine that calls several underlying
%	functions to process and plot statistical data the "Bending Energy"
%	output of an 'mris_curvature_stats' process.
%
%	Essentially, the script splits the energy data from the percentage
%	occurrence, and then normalizes and plots.
%
% PRECONDITIONS
%
%	o An output table generated by 'mris_curvature_stats'.
%	o Note that this script assumes that principleCurves_doTable.bash
%	  is run with default arguments.
%
% POSTCONDITIONS
%
%	o The 'meta' function runs through the entire curvature processing
%	  chain, culminating in a series of plots for each main curvature
%	  group.
%
% SEE ALSO
%
% HISTORY
% 24 April 2007
% o Initial design and coding.
%
%


b_skipPrune	= 1;
b_skipFirstCol	= 0;

if length(varargin)
    if(length(varargin)>=1),	b_skipPrune 	= varargin{1};	end
    if(length(varargin)>=2),	b_skipFirstCol	= varargin{2};	end
end

% First, create the two filtered tables
astr_BETableE= 	sprintf('%s.BE', astr_BETable);
astr_BETableP=	sprintf('%s.BP', astr_BETable);

if ~b_skipPrune
    str_BEproc		= sprintf('sh tableprune.sh %d %s', a_cols, astr_BETable);
    [ret str_console]	= unix(str_BEproc, '-echo');
end

M_BE		= load(astr_BETableE);
M_BP		= load(astr_BETableP);

origCols	= size(M_BE, 2);
if(b_skipFirstCol)
    M_BE	= M_BE(:,2:origCols);
    M_BP	= M_BP(:,2:origCols);
end

M_normalizedEnergy=	M_BE ./ M_BP;

cell_dir	= ls09;
cols		= size(cell_dir, 2);
cell_subj=	cell_dir(1:cols);

cell_strcurvs=	{'Bending Energy', 'Bending Percentage', 'Normalized Energy'};
cell_strFile=	{'BendingEnergy', 'BendingPercentage', 'NormalizedEnergy'};
cell_curvs=	{ [M_BE], [M_BP], [M_normalizedEnergy]};
curv=		0;
cell_lineSpec=	{'-+', '-o',  '-*',  '-x', '-s', '-d'};
for i=1:3
	h= 		figure('Position',[1 1 850 550]);
	curv=		curv + 1;
	plot(cell_curvs{i});
	set(gca, 'XTickLabel', cell_subj, 'XTick', [1:cols]);
	grid on
	if(b_skipFirstCol)
	    legend( 'r=4mm', 'r=5mm', 'r=6mm', 			...
		    'r=7mm', 'r=\infty',				...
		    'Location', 'SouthOutside', 'Orientation', 'horizontal' );
	else 
	    legend( 'r=3mm','r=4mm', 'r=5mm', 'r=6mm', 			...
		    'r=7mm', 'r=\infty',				...
		    'Location', 'SouthOutside', 'Orientation', 'horizontal' );
	end
	title(sprintf('%s-%s: stats', cell_strcurvs{i}, astr_BETable));
	xlabel('subjects');
	str_epsFile=	sprintf('%s-%s.eps', cell_strFile{i}, astr_BETable);
	print('-depsc2', str_epsFile);
	% To convert the eps into png, use 'eps2png' 
end

cM=		cell_curvs;