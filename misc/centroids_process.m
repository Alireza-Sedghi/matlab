function [M_table] = centroids_process(aC_hist, varargin)
%
% NAME
%
%	function [M_table] = centroids_process(aC_hist, [aC_plotArgs, ...
%  							 astr_title])
%
% ARGUMENTS
%
%	INPUT
%	aC_hist			cell		cell array of 2D histogram data
%						typically generated by a call
%						to 'surfcurv_doHistogram'.
%
%	OPTIONAL
%	aC_plotArgs		cell		cell array that specifies plot
%						control parameters.
%	astr_title		string		if specified, use as text stem
%						for plot title	
%
%	OUTPUT
%	M_table			matrix		a table summarising the
%						centroid data. Each "subject"
%						in the input cell array
%						will have a row of the
%						table.
%
% DESCRIPTION
%
%	'centroids_process' provides centroid information on each
%	cell element of its input cell array. It is assumed of course
%	that these individual cell elements are well-formed (see below).
%
% PRECONDITIONS
%
%	o <aC_hist> contains a number of cell entries. Each cell entry
%	  is a 2D matrix, with the first column denoting time values
%	  and the 2nd column the value of an artibrary function. Taken
%	  together, these columns define a shape compatible with the
%	  bar(...) function. 
%
%	o <aC_plotArgs> defines how to group together sub-populations
%	  in the histogram. It consists of the following:
%
%		{ [population1 population2 ... populationN], ...
%		  {plotSpec1, plotSpec2, ... plotSpecN} }
%
%	i.e. a vector and a cell array. These *must* be the same length
%	and are interpreted as follows:
%
%		- the vector specifies the number of elements in a
%		  given sub-population, in the order in which they
%		  occur in the histogram;
%		- the cell array specifies LineMarker data for that
%		  sub-population.
%
%	Thus, if a histogram consists of, say 8 neonates, 3 children, and
%	one adult, we could do the following:
%
%		v_group 	= [8, 3, 1]	% babies, kids, adults
%		c_line		= {'-or', '-sg', '-^b'}
%		c_plotArgs	= {v_group, c_line}
%
%
% POSTCONDITIONS
%
%	o Centroid information of each entry in the input cell array is
%	  determined. This information is presented in the following manner:
%
%		<subj> <Xlz Ylz> <Xgz Ygz> <Xc Yc>
%
%	  where 'lz' denotes less than zero, 'gz' greater than or equal to
%	  zero, and 'c' cumulative (or total) shape.
%
%	  Essentially, centroid data is presented for the part of the 
%	  curve that exists at t<0; the part at t>=0; and the whole
%	  shape.
% 
% SEE ALSO
%
%	o waveletbars.m
%
% HISTORY
% 31 July 2006
% o Initial design and coding.
%
% 05 September 2006
% o Plotting functionality as varargin
%

function [Xr, Yr, Xl, Yl, cell_r, cell_l] = ...
				textLabel_determine(acell_subj, aX, aY)
    cell_r	= cell(1,1);
    cell_l	= cell(1,1);
    l		= 1;
    r		= 1;
    for i=1:length(acell_subj)
	if mod(i,2)
	    str_side	= '\rightarrow';
	    cell_r{r} 	= sprintf(' %s %s ', acell_subj{i}, str_side);
	    Xr(r)	= aX(i);
	    Yr(r)	= aY(i);
	    r		= r+1;
	else
	    str_side	= '\leftarrow';
	    cell_l{l} 	= sprintf(' %s %s ', str_side , acell_subj{i});
	    Xl(l)	= aX(i);
	    Yl(l)	= aY(i);
	    l		= l+1;
	end
    end
    text( 	Xl, Yl, 	...
		cell_l,	...
		'FontSize', 8,	...
		'HorizontalAlignment', 'left');
    text(	Xr, Yr, 	...
		cell_r,	...
		'FontSize', 8,	...
		'HorizontalAlignment', 'right');
end


v_group		= [length(aC_hist)];
c_line		= {'-or'};
str_title	= 'Centroids of Subject Curvature Histograms: ';

b_generatePlots	= 0;
if length(varargin)
	if length(varargin) >= 1
		b_generatePlots = 1;
		c_plotArgs	= varargin{1};
		if length(c_plotArgs) == 2
		    v_group		= c_plotArgs{1};
		    c_line		= c_plotArgs{2};
		end
	end
	if length(varargin) >= 2
		str_extra = varargin{2};
		str_title = sprintf('%s %s', str_title, str_extra);
	end
end

[status,str_dirAll]= system('/bin/ls -d [0-9]* | sort -n');
str_start= pwd;
% Create a cell array of the directory names
ndir= 1;
[str_dir str_rem]= strtok(str_dirAll);
cell_dir{ndir}= str_dir;
while length(str_rem)
	[str_dir str_rem]= strtok(str_rem);
	ndir= ndir + 1;
	cell_dir{ndir}= str_dir;
end

cols=		ndir - 1;
cell_subj=	cell_dir(1:cols);

[cellrows cellcols]	= size(aC_hist);
M_table			= zeros(cellcols, 7);

for subj=1:cellcols
    M_table(subj, 1)	= subj;
    hist_subj	= aC_hist{subj};
    neghist	= find(hist_subj(:,1) <  0);
    poshist	= find(hist_subj(:,1) >= 0);
    if length(neghist)
        M_table(subj, 2:3)	= centroidND_find(hist_subj(neghist,:));
    end
    if length(poshist)
        M_table(subj, 4:5)  = centroidND_find(hist_subj(poshist,:));
    end
    M_table(subj, 6:7)	= centroidND_find(hist_subj);
end

if b_generatePlots
    scrsz = get(0,'ScreenSize');
    h = figure('Position',[1 1 850 550]);
%    h = figure('Position',[1 1000 1500 1000]);    
%      set(gcf, 'Units', 'centimeters');
%      set(gcf, 'PaperPositionMode', 'manual');
%      set(gcf, 'PaperPosition', [0, 0, 10, 10]);    
%      h = figure('Units', 'centimeters', 'PaperPositionMode','auto', 'Position',[0 0 10 10]);
    Xnc	= M_table(:, 2);
    Ync	= M_table(:, 3);
    Xpc	= M_table(:, 4);
    Ypc	= M_table(:, 5);

    if min(Ync) < min(Ypc)
	ymin = min(Ync);
    else
	ymin = min(Ypc);
    end
    if max(Ync) > max(Ypc)
	ymax = max(Ync);
    else
	ymax = max(Ypc);
    end

    hold on;
    axis([min(Xnc)*1.1, max(Xpc)*1.1, ymin*0.9, ymax*1.1]);

    groups		= length(v_group);
    start		= 0;
    i			= 0;
    l			= 1;
    r			= 1;
    for population 	= 1:groups
	XncP	= Xnc(start+1:v_group(population)+start);
	YncP	= Ync(start+1:v_group(population)+start);
	XpcP	= Xpc(start+1:v_group(population)+start);
	YpcP	= Ypc(start+1:v_group(population)+start);
	cell_subj2 = cell_subj(start+1:v_group(population)+start);

	if length(neghist)
	    plot(	XncP, YncP, c_line{population}, ...
		        'MarkerFaceColor', [0.49 1.00 0.63]);
	    [Xr, Yr, Xl, Yl, cell_r, cell_r] = ...
				textLabel_determine(cell_subj2, XncP, YncP);
	end
	plot(	XpcP, YpcP, c_line{population}, ...
		'MarkerFaceColor', [0.49 1.00 0.63]);
  	[Xr, Yr, Xl, Yl, cell_r, cell_r] = ...
			textLabel_determine(cell_subj2, XpcP, YpcP);

	start	= v_group(population)+start;
    end
    grid;
    xlabel('X centroid position');
    ylabel('Y centroid position');
    title(str_title);
    str_epsFile=	sprintf('centroid-%s.eps', str_extra);
    str_jpgFile=	sprintf('centroid-%s.jpg', str_extra);
    print('-depsc2', '-r300', str_epsFile);
    print('-djpeg',  '-r300', str_jpgFile);
    hold off;
end

end